#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    scroll-layers = <4>;
};

/ {
    combos {
        compatible = "zmk,combos";

        MB1 {
            bindings = <&mkp MB1>;
            key-positions = <19 20>;
            layers = <0>;
        };

        MB2 {
            bindings = <&mkp MB2>;
            key-positions = <7 8>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W             &kp E         &kp R         &kp T                                                                &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A           &kp S             &kp D         &kp F         &kp G     &kp TAB                        &kp TAB                     &kp H        &kp J  &kp K      &lt 4 L  &kp MINUS
&lt 3 Z         &kp X             &kp C         &kp V         &kp B     &mt LEFT_SHIFT LANGUAGE_2      &mt RIGHT_SHIFT LANGUAGE_1  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &mkp MB1  &kp BACKSPACE                  &lt 2 SPACE                 &lt 1 ENTER                             &kp ESCAPE
            >;
        };

        MOVE {
            bindings = <
&trans        &trans        &trans      &trans  &trans                      &trans              &kp LC(LEFT_ARROW)    &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)    &trans
&trans        &trans        &trans      &trans  &trans  &trans      &trans  &trans              &kp LG(LEFT_BRACKET)  &kp UP_ARROW      &kp LG(RIGHT_BRACKET)  &trans
&trans        &trans        &trans      &trans  &trans  &trans      &trans  &kp LG(LEFT_ARROW)  &kp LEFT_ARROW        &kp DOWN_ARROW    &kp RIGHT_ARROW        &kp LG(RIGHT_ARROW)
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR  &trans  &trans  &trans      &trans  &trans                                                                             &trans
            >;
        };

        SYMBOL_NUM {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(LPAR)   &kp LS(RPAR)                                             &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp N0
&kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LBKT       &kp RBKT      &kp LC(LA(KP_NUMBER_0))      &kp LS(PLUS)  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp LS(UNDER)
&kp LS(CARET)  &kp LS(AMPS)  &kp SEMI       &kp LS(COLON)  &kp SQT       &kp LS(DQT)                  &kp LS(STAR)  &kp FSLH   &kp N1  &kp N2  &kp N3  &kp BSLH
&trans         &trans        &trans         &trans         &trans        &trans                       &trans        &trans                             &trans
            >;
        };

        FN {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
