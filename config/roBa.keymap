#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#define ZMK_MOUSE_POINTING_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        hennkann {
            bindings = <&to_layer_0 INT_HENKAN>;
            key-positions = <20 21>;
        };

        mb2 {
            bindings = <&mkp MB2>;
            key-positions = <26 27>;
            layers = <0>;
        };

        // MB2 {
        //   bindings = <&mkp MB2>;
        //   key-positions = <26 27>;
        // };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R            &kp T                                                                       &kp Y        &kp U    &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D         &kp F            &kp G        &mkp MB3                         &kp LEFT_SHIFT                &kp H        &lt 4 J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z    &kp X         &kp C         &kp V            &kp B        &mkp MB1                         &kp TAB                       &kp N        &kp M    &kp COMMA  &kp DOT  &kp SLASH
&kp TAB             &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 BACKSPACE  &lt 2 SPACE  &mt LEFT_COMMAND LANGUAGE_2      &mt RIGHT_COMMAND LANGUAGE_1  &lt 3 ENTER                               &kp DELETE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBOL {
            bindings = <
&trans       &trans           &trans         &trans        &trans                          &trans                &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NON_US_BACKSLASH  &kp PIPE
&kp TILDE    &kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR  &trans      &trans  &kp LS(LG(NUMBER_3))  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp COLON             &kp DOUBLE_QUOTES
&kp PERCENT  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp GRAVE   &trans      &trans  &kp LS(LG(NUMBER_4))  &kp LESS_THAN         &kp GREATER_THAN       &kp SEMICOLON         &kp SQT
&trans       &trans           &trans         &trans        &trans      &trans      &trans  &trans                                                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                             &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp BACKSLASH
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans      &kp PLUS      &kp MINUS        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp UNDERSCORE
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans      &kp ASTERISK  &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp EQUAL
&trans   &trans   &trans   &trans   &trans   &trans      &trans        &trans                                                              &trans
            >;
        };

        ARROW {
            bindings = <
&trans          &trans  &trans  &trans  &trans                      &kp RC(UP_ARROW)  &kp LG(LS(LEFT_ARROW))  &kp UP_ARROW    &kp LG(LS(RIGHT_ARROW))  &kp ESCAPE
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &kp HOME          &kp LEFT_ARROW          &kp LSHIFT      &kp RIGHT_ARROW          &kp END
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans  &trans            &kp LG(LEFT_BRACKET)    &kp DOWN_ARROW  &kp LG(RIGHT_BRACKET)    &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Setting {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
